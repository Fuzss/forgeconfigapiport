apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        if (project(":Common").file("src/main/resources/${modId}.common.mixins.json").exists()) {
            mixinConfig "${modId}.common.mixins.json"
        }
        if (project.file("src/main/resources/${modId}.forge.mixins.json").exists()) {
            mixinConfig "${modId}.forge.mixins.json"
        }
    }

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs '-Xms1G', '-Xmx4G', '-Dmixin.debug.export=true', '-Dmixin.debug.verbose=true'
        }
        client {
            client()
            setConfigName("Forge Client ${libs.versions.minecraft.get()}")
        }
        server {
            server()
            setConfigName("Forge Server ${libs.versions.minecraft.get()}")
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "Minecraft Forge"
        url = "https://maven.minecraftforge.net/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionForge")) { transitive = false }

    // Minecraft Forge
    forge libs.minecraftforge.forge

    // Puzzles Lib
//    modApi libs.puzzleslib.forge

    var versionCatalog = rootProject.extensions.getByType(VersionCatalogsExtension).named("libs")

    // Quality of Life Mods
    versionCatalog.findLibrary("bettermodsbutton.forge").ifPresent {
        modLocalRuntime it
    }
    versionCatalog.findLibrary("forgeconfigscreens.forge").ifPresent {
        modLocalRuntime it
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("")
    atAccessWideners.add("${modId}.accesswidener")
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task refreshUpdateJson {
    onlyIf { project.hasProperty('modResources') }
    doLast {
        def updateFile = file(project.findProperty('modResources').concat(File.separator).concat('update').concat(File.separator).concat("${modId}").concat('.json'))
        def updateJson
        if (updateFile.exists() && updateFile.canRead()) {
            updateJson = new groovy.json.JsonSlurper().parseText(updateFile.text)
            "${projectGameVersions}".replaceAll(" ", "").split(",").each { version ->
                updateJson['promos']["${version}-latest"] = "${modVersion}"
                // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                if ("${modVersion}".matches("[^a-zA-Z]+")) {
                    updateJson['promos']["${version}-recommended"] = "${modVersion}"
                }
            }
        } else {
            def builder = new groovy.json.JsonBuilder()
            updateJson = builder {
                homepage "${modSourceUrl}"
                promos {
                    "${projectGameVersions}".replaceAll(" ", "").split(",").each { version ->
                        "${version}-latest" "${modVersion}"
                        // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                        if ("${modVersion}".matches("[^a-zA-Z]+")) {
                            "${version}-recommended" "${modVersion}"
                        }
                    }
                }
            }
        }
        def output = new groovy.json.JsonOutput()
        updateFile.write(output.prettyPrint(output.toJson(updateJson)))
    }
}

[tasks.modrinth, tasks.curseforge].each { it.finalizedBy project.tasks.refreshUpdateJson }
