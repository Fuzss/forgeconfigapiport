apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name = "Modmuss"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = "ladysnake"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = "jamieswhiteshirt"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Fabric Loader
    modApi libs.fabricloader.fabric

    // Fabric Api
    modApi libs.fabricapi.fabric

    // Night Config
    api(include(libs.nightconfigcore))
    api(include(libs.nightconfigtoml))

    // Puzzles Lib
//    modApi libs.puzzleslib.fabric

    // Cardinal Components
//    modApi(include(libs.cardinalcomponentsbase.fabric.get()))
//    modApi(include(libs.cardinalcomponentsentity.fabric.get()))
//    modApi(include(libs.cardinalcomponentsblock.fabric.get()))
//    modApi(include(libs.cardinalcomponentschunk.fabric.get()))
//    modApi(include(libs.cardinalcomponentsworld.fabric.get()))

    // Extensible Enums
//    modApi(include(libs.extensibleenums.fabric.get()))

    // Quality of Life Mods
    versionCatalog.findLibrary("modmenu.fabric").ifPresent {
        modLocalRuntime(it)
    }
    versionCatalog.findLibrary("forgeconfigscreens.fabric").ifPresent {
        modLocalRuntime(it)
    }
}

loom {
    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArg '-Dmixin.debug.export=true'
        }
        client {
            client()
            setConfigName("Fabric Client-${libs.versions.minecraft.get()}")
        }
        server {
            server()
            setConfigName("Fabric Server-${libs.versions.minecraft.get()}")
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
